{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "204ad08f-f2b1-4797-ad28-4da71c906050",
   "metadata": {},
   "outputs": [],
   "source": [
    "### Date Detection\n",
    "\n",
    "#detect date in format DD/MM/YYYY\n",
    "\n",
    "import re\n",
    "dateRegex = re.compile(r'''(\n",
    "(([0][1-9])|([1-2]\\d)|([3][0-1])) #DD 01-31\n",
    "(/)\n",
    "([0][1-9]|[1][1-2]) #MM 01-12\n",
    "(/)\n",
    "([1-2]\\d{3}) #YYYY 1000-2999\n",
    ")''', re.VERBOSE)\n",
    "\n",
    "text = '29/02/1924, 31/02/1900, 30/02/2000, 30/04/1800, 31/02/2000, 31/04/2400, 23/02/2000'\n",
    "\n",
    "dateRegex.findall(text)\n",
    "\n",
    "\n",
    "matches = []\n",
    "validDates = []\n",
    "invalidDates = []\n",
    "\n",
    "\n",
    "#take found dates, validates, and creates list of validated dates and invalid dates\n",
    "for groups in dateRegex.findall(text):\n",
    "    \n",
    "    #if year divisible by 4 and 400\n",
    "    leapYear = False\n",
    "    if int(groups[8]) % 4 == 0:\n",
    "        if int(groups[8]) % 100 == 0:\n",
    "            if int(groups[8]) % 400 == 0:\n",
    "                leapYear = True\n",
    "        else:\n",
    "            leapYear = True\n",
    "            \n",
    "    if groups[6] == '04' or groups[6] == '06' or groups[6] == '09' or groups[6] == '11':\n",
    "        if int(groups[1]) > 30:\n",
    "            invalidDates.append(groups[0])\n",
    "            continue\n",
    "            \n",
    "    if groups[6] == '02':\n",
    "        if leapYear == False and int(groups[1]) > 28:\n",
    "            invalidDates.append(groups[0])\n",
    "            continue\n",
    "        elif leapYear == True and int(groups[1]) > 29:\n",
    "            invalidDates.append(groups[0])\n",
    "            continue      \n",
    "\n",
    "    validDates.append(groups[0])\n",
    "\n",
    "if len(validDates) > 0:\n",
    "    print(validDates)\n",
    "\n",
    "if len(invalidDates) > 0:\n",
    "    print(invalidDates)\n",
    "else:\n",
    "    print('No matches of dates')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
